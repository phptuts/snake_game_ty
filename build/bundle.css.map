{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Food.svelte",
    "../../SnakeBody.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Snake from \"./Snake.svelte\";\n  import Food from \"./Food.svelte\";\n  let foodLeft = 0;\n  let foodTop = 0;\n  let direction = \"right\";\n  let snakeBodies = [];\n\n  $: score = snakeBodies.length - 3;\n\n  setInterval(() => {\n    snakeBodies.pop();\n\n    let { left, top } = snakeBodies[0];\n\n    if (direction === \"up\") {\n      top -= 50;\n    } else if (direction === \"down\") {\n      top += 50;\n    } else if (direction === \"left\") {\n      left -= 50;\n    } else if (direction === \"right\") {\n      left += 50;\n    }\n\n    const newHead = { left, top };\n\n    snakeBodies = [newHead, ...snakeBodies];\n\n    if (isCollide(newHead, { left: foodLeft, top: foodTop })) {\n      moveFood();\n      snakeBodies = [...snakeBodies, snakeBodies[snakeBodies.length - 1]];\n    }\n\n    if (isGameOver()) {\n      resetGame();\n    }\n  }, 200);\n\n  function isCollide(a, b) {\n    return !(\n      a.top < b.top ||\n      a.top > b.top ||\n      a.left < b.left ||\n      a.left > b.left\n    );\n  }\n\n  function moveFood() {\n    foodTop = Math.floor(Math.random() * 14) * 50;\n    foodLeft = Math.floor(Math.random() * 20) * 50;\n  }\n\n  function resetGame() {\n    moveFood();\n    direction = \"right\";\n    snakeBodies = [\n      {\n        left: 100,\n        top: 0\n      },\n      {\n        left: 50,\n        top: 0\n      },\n      {\n        left: 0,\n        top: 0\n      }\n    ];\n  }\n\n  function isGameOver() {\n    const snakeBodiesNoHead = snakeBodies.slice(1);\n\n    const snakeCollisions = snakeBodiesNoHead.filter(sb =>\n      isCollide(sb, snakeBodies[0])\n    );\n\n    if (snakeCollisions.length > 0) {\n      return true;\n    }\n\n    const { top, left } = snakeBodies[0];\n\n    if (top >= 700 || top < 0 || left < 0 || left >= 1000) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function getDirectionFromKeyCode(keyCode) {\n    if (keyCode === 38) {\n      return \"up\";\n    } else if (keyCode === 39) {\n      return \"right\";\n    } else if (keyCode === 37) {\n      return \"left\";\n    } else if (keyCode === 40) {\n      return \"down\";\n    }\n\n    return false;\n  }\n\n  function onKeyDown(e) {\n    const newDirection = getDirectionFromKeyCode(e.keyCode);\n    if (newDirection) {\n      direction = newDirection;\n    }\n  }\n\n  resetGame();\n</script>\n\n<style>\n  main {\n    width: 1000px;\n    height: 700px;\n    border: solid black 1px;\n    position: relative;\n    margin: 20px auto;\n    background-image: url(\"../background.jpg\");\n    background-size: cover;\n  }\n  h2,\n  h1 {\n    text-align: center;\n  }\n</style>\n\n<h1>Snake Game</h1>\n<main>\n  <Snake {direction} {snakeBodies} />\n  <Food {foodLeft} {foodTop} />\n</main>\n<h2>Score {score}</h2>\n<svelte:window on:keydown={onKeyDown} />\n",
    "<script>\n  export let foodTop;\n  export let foodLeft;\n</script>\n\n<style>\n  .food {\n    width: 48px;\n    height: 48px;\n    position: absolute;\n    border: solid black 1px;\n    background-color: red;\n    border-radius: 50%;\n    z-index: 0;\n  }\n</style>\n\n<div class=\"food\" style=\"left: {foodLeft}px; top: {foodTop}px\" />\n",
    "<script>\n  export let top = 50;\n  export let left = 50;\n  export let isHead = false;\n  export let direction = \"right\";\n</script>\n\n<style>\n  .snake-body {\n    background-color: green;\n    border: black 1px solid;\n    position: absolute;\n    width: 48px;\n    height: 48px;\n    z-index: 3;\n  }\n  .eyes {\n    position: absolute;\n    background-color: orange;\n    border-radius: 50%;\n    width: 20%;\n    height: 20%;\n  }\n  #leftEye {\n    left: 70%;\n    top: 10%;\n  }\n  #rightEye {\n    left: 70%;\n    bottom: 10%;\n  }\n  .snake-body.right {\n    transform: rotate(0deg);\n  }\n  .snake-body.left {\n    transform: rotate(180deg);\n  }\n  .snake-body.up {\n    transform: rotate(270deg);\n  }\n  .snake-body.down {\n    transform: rotate(90deg);\n  }\n</style>\n\n<div style=\"left: {left}px; top: {top}px;\" class=\"snake-body {direction}\">\n  {#if isHead}\n    <div id=\"leftEye\" class=\"eyes\" />\n    <div id=\"rightEye\" class=\"eyes\" />\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAqHE,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,gBAAgB,CAAE,IAAI,mBAAmB,CAAC,CAC1C,eAAe,CAAE,KAAK,AACxB,CAAC,AACD,iBAAE,CACF,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,MAAM,AACpB,CAAC;AC3HD,KAAK,cAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,GAAG,CACvB,gBAAgB,CAAE,GAAG,CACrB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,AACZ,CAAC;ACND,WAAW,eAAC,CAAC,AACX,gBAAgB,CAAE,KAAK,CACvB,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CACvB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,KAAK,eAAC,CAAC,AACL,QAAQ,CAAE,QAAQ,CAClB,gBAAgB,CAAE,MAAM,CACxB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACb,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,AACV,CAAC,AACD,SAAS,eAAC,CAAC,AACT,IAAI,CAAE,GAAG,CACT,MAAM,CAAE,GAAG,AACb,CAAC,AACD,WAAW,MAAM,eAAC,CAAC,AACjB,SAAS,CAAE,OAAO,IAAI,CAAC,AACzB,CAAC,AACD,WAAW,KAAK,eAAC,CAAC,AAChB,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,WAAW,GAAG,eAAC,CAAC,AACd,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,WAAW,KAAK,eAAC,CAAC,AAChB,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC"
}